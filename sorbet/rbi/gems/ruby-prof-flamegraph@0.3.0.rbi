# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-prof-flamegraph` gem.
# Please instead update this file by running `bin/tapioca gem ruby-prof-flamegraph`.

# source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#4
module RubyProf
  class << self
    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#6
    def cpu_frequency; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#10
    def cpu_frequency=(value); end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#160
    def disable_gc_stats_if_needed(was_enabled = T.unsafe(nil)); end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#154
    def enable_gc_stats_if_needed; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#149
    def ensure_not_running!; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#145
    def ensure_running!; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#80
    def exclude_threads; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#89
    def exclude_threads=(value); end

    # source://ruby-prof/0.13.0/lib/ruby-prof.rb#34
    def figure_measure_mode; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#14
    def measure_allocations; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#18
    def measure_cpu_time; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#22
    def measure_gc_runs; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#26
    def measure_gc_time; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#30
    def measure_memory; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#55
    def measure_mode; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#71
    def measure_mode=(value); end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#165
    def measure_mode_requires_gc_stats_enabled?; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#34
    def measure_process_time; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#38
    def measure_wall_time; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#106
    def pause; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#135
    def profile(&block); end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#120
    def resume; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#112
    def running?; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#99
    def start; end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#94
    def start_script(script); end

    # source://ruby-prof/0.13.0/lib/ruby-prof/compatibility.rb#126
    def stop; end
  end
end

# wow much flame graph many stack wow!!
#
# source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#8
class RubyProf::FlameGraphPrinter < ::RubyProf::AbstractPrinter
  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#34
  def min_time; end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#55
  def name(call_info); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#60
  def number(x); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#12
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#38
  def print_stack(prefix, call_info); end
end

# source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#10
RubyProf::FlameGraphPrinter::VERSION = T.let(T.unsafe(nil), String)

module RubyProf::Measure; end

class RubyProf::Measure::Allocations
  class << self
    def measure; end
  end
end

class RubyProf::Measure::CpuTime
  class << self
    def frequency; end
    def measure; end
  end
end

class RubyProf::Measure::GcRuns
  class << self
    def measure; end
  end
end

class RubyProf::Measure::GcTime
  class << self
    def measure; end
  end
end

class RubyProf::Measure::Memory
  class << self
    def measure; end
  end
end

class RubyProf::Measure::ProcessTime
  class << self
    def measure; end
  end
end

class RubyProf::Measure::WallTime
  class << self
    def measure; end
  end
end
