# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-prof` gem.
# Please instead update this file by running `bin/tapioca gem ruby-prof`.

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

# source://ruby-prof//lib/ruby-prof/rack.rb#4
module Rack; end

# source://ruby-prof//lib/ruby-prof/rack.rb#5
class Rack::RubyProf
  # @return [RubyProf] a new instance of RubyProf
  #
  # source://ruby-prof//lib/ruby-prof/rack.rb#6
  def initialize(app, options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/rack.rb#19
  def call(env); end

  # source://ruby-prof//lib/ruby-prof/rack.rb#38
  def print(data, path); end
end

# These methods are here for backwards compatability with previous RubyProf releases
#
# source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#3
module RubyProf
  class << self
    # Measurements
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#6
    def cpu_frequency; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#10
    def cpu_frequency=(value); end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#160
    def disable_gc_stats_if_needed(was_enabled = T.unsafe(nil)); end

    # for GC.allocated_size to work GC statistics should be enabled
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#154
    def enable_gc_stats_if_needed; end

    # @raise [RuntimeError]
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#149
    def ensure_not_running!; end

    # @raise [RuntimeError]
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#145
    def ensure_running!; end

    # call-seq:
    # exclude_threads -> exclude_threads
    #
    # Returns threads ruby-prof should exclude from profiling
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#80
    def exclude_threads; end

    # call-seq:
    # exclude_threads= -> void
    #
    # Specifies what threads ruby-prof should exclude from profiling
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#89
    def exclude_threads=(value); end

    # Checks if the user specified the clock mode via
    # the RUBY_PROF_MEASURE_MODE environment variable
    #
    # source://ruby-prof//lib/ruby-prof.rb#34
    def figure_measure_mode; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#14
    def measure_allocations; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#18
    def measure_cpu_time; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#22
    def measure_gc_runs; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#26
    def measure_gc_time; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#30
    def measure_memory; end

    # call-seq:
    # measure_mode -> measure_mode
    #
    # Returns what ruby-prof is measuring.  Valid values include:
    #
    # *RubyProf::PROCESS_TIME - Measure process time.  This is default.  It is implemented using the clock functions in the C Runtime library.
    # *RubyProf::WALL_TIME - Measure wall time using gettimeofday on Linx and GetLocalTime on Windows
    # *RubyProf::CPU_TIME - Measure time using the CPU clock counter.  This mode is only supported on Pentium or PowerPC platforms.
    # *RubyProf::ALLOCATIONS - Measure object allocations.  This requires a patched Ruby interpreter.
    # *RubyProf::MEMORY - Measure memory size.  This requires a patched Ruby interpreter.
    # *RubyProf::GC_RUNS - Measure number of garbage collections.  This requires a patched Ruby interpreter.
    # *RubyProf::GC_TIME - Measure time spent doing garbage collection.  This requires a patched Ruby interpreter.*/
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#55
    def measure_mode; end

    # call-seq:
    # measure_mode=value -> void
    #
    # Specifies what ruby-prof should measure.  Valid values include:
    #
    # *RubyProf::PROCESS_TIME - Measure process time.  This is default.  It is implemented using the clock functions in the C Runtime library.
    # *RubyProf::WALL_TIME - Measure wall time using gettimeofday on Linx and GetLocalTime on Windows
    # *RubyProf::CPU_TIME - Measure time using the CPU clock counter.  This mode is only supported on Pentium or PowerPC platforms.
    # *RubyProf::ALLOCATIONS - Measure object allocations.  This requires a patched Ruby interpreter.
    # *RubyProf::MEMORY - Measure memory size.  This requires a patched Ruby interpreter.
    # *RubyProf::GC_RUNS - Measure number of garbage collections.  This requires a patched Ruby interpreter.
    # *RubyProf::GC_TIME - Measure time spent doing garbage collection.  This requires a patched Ruby interpreter.*/
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#71
    def measure_mode=(value); end

    # @return [Boolean]
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#165
    def measure_mode_requires_gc_stats_enabled?; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#34
    def measure_process_time; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#38
    def measure_wall_time; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#106
    def pause; end

    # Profile a block
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#135
    def profile(&block); end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#120
    def resume; end

    # @return [Boolean]
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#112
    def running?; end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#99
    def start; end

    # Profiling
    #
    # source://ruby-prof//lib/ruby-prof/compatibility.rb#94
    def start_script(script); end

    # source://ruby-prof//lib/ruby-prof/compatibility.rb#126
    def stop; end
  end
end

RubyProf::ALLOCATIONS = T.let(T.unsafe(nil), Integer)
RubyProf::ALLOCATIONS_ENABLED = T.let(T.unsafe(nil), FalseClass)

# source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#4
class RubyProf::AbstractPrinter
  # Create a new printer.
  #
  # result should be the output generated from a profiling run
  #
  # @return [AbstractPrinter] a new instance of AbstractPrinter
  #
  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#8
  def initialize(result); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#45
  def method_name(method); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#33
  def min_percent; end

  # Print a profiling report to the provided output.
  #
  # output - Any IO object, including STDOUT or a file.
  # The default value is STDOUT.
  #
  # options - Hash of print options.  See #setup_options
  # for more information.  Note that each printer can
  # define its own set of options.
  #
  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#61
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#37
  def print_file; end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#82
  def print_footer(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#79
  def print_header(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#73
  def print_thread(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#67
  def print_threads; end

  # Specify print options.
  #
  # options - Hash table
  #   :min_percent - Number 0 to 100 that specifes the minimum
  #                  %self (the methods self time divided by the
  #                  overall total time) that a method must take
  #                  for it to be printed out in the report.
  #                  Default value is 0.
  #
  #   :print_file  - True or false. Specifies if a method's source
  #                  file should be printed.  Default value if false.
  #
  #   :sort_method - Specifies method used for sorting method infos.
  #                  Available values are :total_time, :self_time,
  #                  :wait_time, :children_time
  #                  Default value is :total_time
  #
  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#29
  def setup_options(options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/printers/abstract_printer.rb#41
  def sort_method; end
end

# source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#4
class RubyProf::AggregateCallInfo
  # @return [AggregateCallInfo] a new instance of AggregateCallInfo
  #
  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#7
  def initialize(call_infos); end

  # Returns the value of attribute call_infos.
  #
  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#5
  def call_infos; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#48
  def called; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#26
  def children; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#44
  def children_time; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#22
  def line; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#18
  def parent; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#36
  def self_time; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#14
  def target; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#52
  def to_s; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#32
  def total_time; end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#40
  def wait_time; end

  private

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#58
  def aggregate(method_name); end

  # source://ruby-prof//lib/ruby-prof/aggregate_call_info.rb#65
  def aggregate_without_recursion(method_name); end
end

RubyProf::CLOCKS_PER_SEC = T.let(T.unsafe(nil), Integer)
RubyProf::CPU_TIME = T.let(T.unsafe(nil), Integer)
RubyProf::CPU_TIME_ENABLED = T.let(T.unsafe(nil), TrueClass)

# source://ruby-prof//lib/ruby-prof/call_info.rb#4
class RubyProf::CallInfo
  def add_self_time(_arg0); end
  def add_total_time(_arg0); end
  def add_wait_time(_arg0); end

  # source://ruby-prof//lib/ruby-prof/call_info.rb#26
  def call_sequence; end

  def called; end
  def called=(_arg0); end
  def children; end

  # source://ruby-prof//lib/ruby-prof/call_info.rb#7
  def children_time; end

  def depth; end

  # eliminate call info from the call tree.
  # adds self and wait time to parent and attaches called methods to parent.
  # merges call trees for methods called from both praent end self.
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#43
  def eliminate!; end

  # find a specific call in list of children. returns nil if not found.
  # note: there can't be more than one child with a given target method. in other words:
  # x.children.grep{|y|y.target==m}.size <= 1 for all method infos m and call infos x
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#63
  def find_call(other); end

  def line; end

  # merge two call trees. adds self, wait, and total time of other to self and merges children of other into children of self.
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#70
  def merge_call_tree(other); end

  def parent; end
  def parent=(_arg0); end

  # Returns the value of attribute recursive.
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#5
  def recursive; end

  # Sets the attribute recursive
  #
  # @param value the value to set the attribute recursive to.
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#5
  def recursive=(_arg0); end

  # @return [Boolean]
  #
  # source://ruby-prof//lib/ruby-prof/call_info.rb#32
  def root?; end

  def self_time; end

  # source://ruby-prof//lib/ruby-prof/call_info.rb#13
  def stack; end

  def target; end

  # source://ruby-prof//lib/ruby-prof/call_info.rb#36
  def to_s; end

  def total_time; end
  def wait_time; end
end

# Prints out the call graph based on CallInfo instances.  This
# is mainly for debugging purposes as it provides access into
# into RubyProf's internals.
#
# source://ruby-prof//lib/ruby-prof/printers/call_info_printer.rb#8
class RubyProf::CallInfoPrinter < ::RubyProf::AbstractPrinter
  private

  # source://ruby-prof//lib/ruby-prof/printers/call_info_printer.rb#13
  def print_header(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/call_info_printer.rb#21
  def print_methods(thread); end
end

# source://ruby-prof//lib/ruby-prof/printers/call_info_printer.rb#9
RubyProf::CallInfoPrinter::TIME_WIDTH = T.let(T.unsafe(nil), Integer)

# source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#19
class RubyProf::CallInfoVisitor
  # @return [CallInfoVisitor] a new instance of CallInfoVisitor
  #
  # source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#22
  def initialize(thread); end

  # Returns the value of attribute block.
  #
  # source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#20
  def block; end

  # Returns the value of attribute thread.
  #
  # source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#20
  def thread; end

  # source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#26
  def visit(&block); end

  # source://ruby-prof//lib/ruby-prof/call_info_visitor.rb#36
  def visit_call_info(call_info); end
end

# prints a HTML visualization of the call tree
#
# source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#8
class RubyProf::CallStackPrinter < ::RubyProf::AbstractPrinter
  include ::ERB::Escape
  include ::ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#163
  def application; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#167
  def arguments; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#150
  def color(p); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#183
  def copy_image_files; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#146
  def dump(ci); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#179
  def expansion; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#127
  def graph_link(call_info); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#113
  def link(call_info); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#134
  def method_href(method); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#108
  def name(call_info); end

  # Specify print options.
  #
  # options - Hash table
  #   :min_percent - Number 0 to 100 that specifes the minimum
  #                  %self (the methods self time divided by the
  #                  overall total time) that a method must take
  #                  for it to be printed out in the report.
  #                  Default value is 0.
  #
  #   :print_file  - True or false. Specifies if a method's source
  #                  file should be printed.  Default value if false.
  #
  #   :threshold   - a float from 0 to 100 that sets the threshold of
  #                  results displayed.
  #                  Default value is 1.0
  #
  #   :title       - a String to overide the default "ruby-prof call tree"
  #                  title of the report.
  #
  #   :expansion   - a float from 0 to 100 that sets the threshold of
  #                  results that are expanded, if the percent_total
  #                  exceeds it.
  #                  Default value is 10.0
  #
  #   :application - a String to overide the name of the application,
  #                  as it appears on the report.
  #
  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#38
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#741
  def print_commands; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#211
  def print_css; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#207
  def print_footer; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#195
  def print_header; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#754
  def print_help; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#316
  def print_java_script; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#75
  def print_stack(call_info, parent_time); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#732
  def print_title_bar; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#142
  def sum(a); end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#175
  def threshold; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#171
  def title; end

  # source://ruby-prof//lib/ruby-prof/printers/call_stack_printer.rb#138
  def total_time(call_infos); end
end

# Generate profiling information in calltree format
# for use by kcachegrind and similar tools.
#
# source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#7
class RubyProf::CallTreePrinter < ::RubyProf::AbstractPrinter
  # source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#62
  def convert(value); end

  # source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#66
  def file(method); end

  # Specify print options.
  #
  # options - Hash table
  #   :min_percent - Number 0 to 100 that specifes the minimum
  #                  %self (the methods self time divided by the
  #                  overall total time) that a method must take
  #                  for it to be printed out in the report.
  #                  Default value is 0.
  #
  #   :print_file  - True or false. Specifies if a method's source
  #                  file should be printed.  Default value if false.
  #
  # source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#20
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#70
  def print_thread(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/call_tree_printer.rb#56
  def print_threads; end
end

# Generates a graphviz graph in dot format.
# To use the dot printer:
#
#   result = RubyProf.profile do
#     [code to profile]
#   end
#
#   printer = RubyProf::DotPrinter.new(result)
#   printer.print(STDOUT)
#
# You can use either dot viewer such as GraphViz, or the dot command line tool
# to reformat the output into a wide variety of outputs:
#
#   dot -Tpng graph.dot > graph.png
#
# source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#21
class RubyProf::DotPrinter < ::RubyProf::AbstractPrinter
  # Creates the DotPrinter using a RubyProf::Result.
  #
  # @return [DotPrinter] a new instance of DotPrinter
  #
  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#26
  def initialize(result); end

  # Print a graph report to the provided output.
  #
  # output - Any IO object, including STDOUT or a file. The default value is
  # STDOUT.
  #
  # options - Hash of print options.  See #setup_options
  # for more information.
  #
  # When profiling results that cover a large number of method calls it
  # helps to use the :min_percent option, for example:
  #
  #   DotPrinter.new(result).print(STDOUT, :min_percent=>5)
  #
  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#44
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # Determines an ID to use to represent the subject in the Dot file.
  #
  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#77
  def dot_id(subject); end

  # Something of a hack, figure out which constant went with the
  # RubyProf.measure_mode so that we can display it.  Otherwise it's easy to
  # forget what measurement was made.
  #
  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#61
  def mode_name; end

  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#94
  def print_classes(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#115
  def print_edges(total_time, method); end

  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#81
  def print_thread(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#65
  def print_threads; end

  # Silly little helper for printing to the @output
  #
  # source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#127
  def puts(str); end
end

# source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#22
RubyProf::DotPrinter::CLASS_COLOR = T.let(T.unsafe(nil), String)

# source://ruby-prof//lib/ruby-prof/printers/dot_printer.rb#23
RubyProf::DotPrinter::EDGE_COLOR = T.let(T.unsafe(nil), String)

# Generates flat[link:files/examples/flat_txt.html] profile reports as text.
# To use the flat printer:
#
#   result = RubyProf.profile do
#     [code to profile]
#   end
#
#   printer = RubyProf::FlatPrinter.new(result)
#   printer.print(STDOUT, {})
#
# source://ruby-prof//lib/ruby-prof/printers/flat_printer.rb#14
class RubyProf::FlatPrinter < ::RubyProf::AbstractPrinter
  # Override for this printer to sort by self time by default
  #
  # source://ruby-prof//lib/ruby-prof/printers/flat_printer.rb#16
  def sort_method; end

  private

  # source://ruby-prof//lib/ruby-prof/printers/flat_printer.rb#64
  def print_footer(thread); end

  # def print_threads
  #  @result.threads.each do |thread|
  #    print_thread(thread)
  #    @output << "\n" * 2
  #  end
  # end
  #
  # source://ruby-prof//lib/ruby-prof/printers/flat_printer.rb#29
  def print_header(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/flat_printer.rb#38
  def print_methods(thread); end
end

# Generates flat[link:files/examples/flat_txt.html] profile reports as text.
# To use the flat printer with line numbers:
#
#   result = RubyProf.profile do
#     [code to profile]
#   end
#
#   printer = RubyProf::FlatPrinterWithLineNumbers.new(result)
#   printer.print(STDOUT, {})
#
# source://ruby-prof//lib/ruby-prof/printers/flat_printer_with_line_numbers.rb#14
class RubyProf::FlatPrinterWithLineNumbers < ::RubyProf::FlatPrinter
  # source://ruby-prof//lib/ruby-prof/printers/flat_printer_with_line_numbers.rb#15
  def print_methods(thread); end
end

RubyProf::GC_RUNS = T.let(T.unsafe(nil), Integer)
RubyProf::GC_RUNS_ENABLED = T.let(T.unsafe(nil), FalseClass)
RubyProf::GC_TIME = T.let(T.unsafe(nil), Integer)
RubyProf::GC_TIME_ENABLED = T.let(T.unsafe(nil), FalseClass)

# Generates graph[link:files/examples/graph_html.html] profile reports as html.
# To use the graph html printer:
#
#   result = RubyProf.profile do
#     [code to profile]
#   end
#
#   printer = RubyProf::GraphHtmlPrinter.new(result)
#   printer.print(STDOUT, :min_percent=>0)
#
# The Graph printer takes the following options in its print methods:
#   :filename    - specify a file to use that contains the ERB
#                  template to use, instead of the built-in self.template
#
#   :template    - specify an ERB template to use, instead of the
#                  built-in self.template
#
# source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#24
class RubyProf::GraphHtmlPrinter < ::RubyProf::AbstractPrinter
  include ::ERB::Escape
  include ::ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate

  # Creates a link to a method.  Note that we do not create
  # links to methods which are under the min_perecent
  # specified by the user, since they will not be
  # printed out.
  #
  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#50
  def create_link(thread, method); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#66
  def file_link(path, linenum); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#62
  def method_href(thread, method); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#40
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#31
  def setup_options(options); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#79
  def template; end
end

# source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#29
RubyProf::GraphHtmlPrinter::CALL_WIDTH = T.let(T.unsafe(nil), Integer)

# source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#27
RubyProf::GraphHtmlPrinter::PERCENTAGE_WIDTH = T.let(T.unsafe(nil), Integer)

# source://ruby-prof//lib/ruby-prof/printers/graph_html_printer.rb#28
RubyProf::GraphHtmlPrinter::TIME_WIDTH = T.let(T.unsafe(nil), Integer)

# Generates graph[link:files/examples/graph_txt.html] profile reports as text.
# To use the graph printer:
#
#   result = RubyProf.profile do
#     [code to profile]
#   end
#
#   printer = RubyProf::GraphPrinter.new(result)
#   printer.print(STDOUT, {})
#
# The constructor takes two arguments. See the README
#
# source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#16
class RubyProf::GraphPrinter < ::RubyProf::AbstractPrinter
  private

  # source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#93
  def print_children(method); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#111
  def print_footer(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#23
  def print_header(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#42
  def print_methods(thread); end

  # source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#77
  def print_parents(thread, method); end
end

# source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#19
RubyProf::GraphPrinter::CALL_WIDTH = T.let(T.unsafe(nil), Integer)

# source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#17
RubyProf::GraphPrinter::PERCENTAGE_WIDTH = T.let(T.unsafe(nil), Integer)

# source://ruby-prof//lib/ruby-prof/printers/graph_printer.rb#18
RubyProf::GraphPrinter::TIME_WIDTH = T.let(T.unsafe(nil), Integer)

RubyProf::MEMORY = T.let(T.unsafe(nil), Integer)
RubyProf::MEMORY_ENABLED = T.let(T.unsafe(nil), FalseClass)
module RubyProf::Measure; end

class RubyProf::Measure::Allocations
  class << self
    def measure; end
  end
end

class RubyProf::Measure::CpuTime
  class << self
    def frequency; end
    def measure; end
  end
end

class RubyProf::Measure::GcRuns
  class << self
    def measure; end
  end
end

class RubyProf::Measure::GcTime
  class << self
    def measure; end
  end
end

class RubyProf::Measure::Memory
  class << self
    def measure; end
  end
end

class RubyProf::Measure::ProcessTime
  class << self
    def measure; end
  end
end

class RubyProf::Measure::WallTime
  class << self
    def measure; end
  end
end

# source://ruby-prof//lib/ruby-prof/method_info.rb#4
class RubyProf::MethodInfo
  include ::Comparable

  # source://ruby-prof//lib/ruby-prof/method_info.rb#7
  def <=>(other); end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#106
  def aggregate_children; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#93
  def aggregate_parents; end

  def call_infos; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#21
  def called; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#85
  def children; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#56
  def children_time; end

  # remove method from the call graph. should not be called directly.
  #
  # source://ruby-prof//lib/ruby-prof/method_info.rb#124
  def eliminate!; end

  def full_name; end
  def klass; end
  def klass_name; end
  def line; end
  def method_id; end
  def method_name; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#65
  def min_depth; end

  # @return [Boolean]
  #
  # source://ruby-prof//lib/ruby-prof/method_info.rb#79
  def recursive?; end

  # @return [Boolean]
  #
  # source://ruby-prof//lib/ruby-prof/method_info.rb#71
  def root?; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#38
  def self_time; end

  def source_file; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#119
  def to_s; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#29
  def total_time; end

  # source://ruby-prof//lib/ruby-prof/method_info.rb#47
  def wait_time; end
end

# Helper class to simplify printing profiles of several types from
# one profiling run. Currently prints a flat profile, a callgrind
# profile, a call stack profile and a graph profile.
#
# source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#7
class RubyProf::MultiPrinter
  # @return [MultiPrinter] a new instance of MultiPrinter
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#8
  def initialize(result); end

  # the name of the flat profile file
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#51
  def flat_profile; end

  # the name of the graph profile file
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#41
  def graph_profile; end

  # create profile files under options[:path] or the current
  # directory. options[:profile] is used as the base name for the
  # pofile file, defaults to "profile".
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#18
  def print(options); end

  # the name of the call stack profile file
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#36
  def stack_profile; end

  # the name of the callgrind profile file
  #
  # source://ruby-prof//lib/ruby-prof/printers/multi_printer.rb#46
  def tree_profile; end
end

RubyProf::PROCESS_TIME = T.let(T.unsafe(nil), Integer)
RubyProf::PROCESS_TIME_ENABLED = T.let(T.unsafe(nil), TrueClass)

# source://ruby-prof//lib/ruby-prof/profile.rb#5
class RubyProf::Profile
  def initialize(*_arg0); end

  # This method detect recursive calls in the call graph.
  #
  # source://ruby-prof//lib/ruby-prof/profile.rb#16
  def detect_recursion(thread); end

  # eliminate some calls from the graph by merging the information into callers.
  # matchers can be a list of strings or regular expressions or the name of a file containing regexps.
  #
  # source://ruby-prof//lib/ruby-prof/profile.rb#38
  def eliminate_methods!(matchers); end

  def pause; end
  def paused?; end

  # This method gets called once profiling has been completed
  # but before results are returned to the user.  Thus it provides
  # a hook to do any necessary post-processing on the call graph.
  #
  # source://ruby-prof//lib/ruby-prof/profile.rb#9
  def post_process; end

  def resume; end
  def running?; end
  def start; end
  def stop; end
  def threads; end

  private

  # eliminate methods matching matcher
  #
  # source://ruby-prof//lib/ruby-prof/profile.rb#59
  def eliminate_methods(methods, matcher); end

  # read regexps from file
  #
  # source://ruby-prof//lib/ruby-prof/profile.rb#50
  def read_regexps_from_file(file_name); end

  class << self
    def profile(*_arg0); end
  end
end

# source://ruby-prof//lib/ruby-prof/thread.rb#2
class RubyProf::Thread
  def fiber_id; end
  def id; end
  def methods; end

  # source://ruby-prof//lib/ruby-prof/thread.rb#3
  def top_methods; end

  # source://ruby-prof//lib/ruby-prof/thread.rb#11
  def total_time; end
end

RubyProf::VERSION = T.let(T.unsafe(nil), String)
RubyProf::WALL_TIME = T.let(T.unsafe(nil), Integer)
RubyProf::WALL_TIME_ENABLED = T.let(T.unsafe(nil), TrueClass)
